// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  ALL
}

enum UserRole {
  USER
  ADMIN
}
// --- Authentication & Basic User ---

model Token {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  fullname       String
  nim            String    @unique
  email          String    @unique
  password       String
  profilePicture String?
  Photos         String[]
  bio            String?
  fakultas       String?   
  prodi          String?
  dateOfBirth    DateTime?
  age            Int
  gender         Gender?   
  alamat         String?   // Maybe less relevant for campus app? fakultas/prodi might be enough
  interests      UserInterest[]
  lastOnline     DateTime? @default(now()) // Keep track of activity
  verified       Boolean?  @default(false)
  role           UserRole @default(USER) // Default to USER, can be ADMIN for admin users
  isActive       Boolean   @default(true) // To allow users to deactivate their profile temporarily
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // --- Dating Preferences (Optional but Recommended) ---
  interestedInGender Gender?  // Could be 'MALE', 'FEMALE', 'ALL'. Consider Enum or list if multiple.
  minAgePreference   Int?     // Min age they are looking for
  maxAgePreference   Int?     // Max age they are looking for

  // --- Core Dating Relations ---
  tokens         Token[]
  swipesMade     Swipe[]   @relation("SwipesMade")     // Swipes this user initiated
  swipesReceived Swipe[]   @relation("SwipesReceived") // Swipes other users made on this user
  matchesA       Match[]   @relation("UserAMatches")   // Matches where this user is userA
  matchesB       Match[]   @relation("UserBMatches")   // Matches where this user is userB
  sentMessages   Message[] @relation("SentMessages")   // Messages sent by this user

  // --- Potential Future Relations ---
  // blocksMade     Block[] @relation("Blocker")
  // blocksReceived Block[] @relation("Blocked")
  // reportsMade    Report[] @relation("Reporter")
  // reportsReceived Report[] @relation("Reported")
}

model Interest{
  id String @id @default(cuid())
  name String @unique // Nama minat, mis: "Coding", "Gaming", "Movies", "Music", "Travel"
  users UserInterest[]
}

model UserInterest {
  userId String
  interestId String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interest Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)

  @@id([userId, interestId]) // primary key komposit
  @@index([userId])
  @@index([interestId])
}


// --- Core Dating Models ---

enum SwipeAction {
  LIKE
  DISLIKE
}

model Swipe {
  id           String      @id @default(cuid())
  swiperUserId String      // ID of the user who performed the swipe
  swipedUserId String      // ID of the user who was swiped on
  action       SwipeAction // LIKE or DISLIKE
  createdAt    DateTime    @default(now())

  // Relations
  swiper User @relation("SwipesMade", fields: [swiperUserId], references: [id], onDelete: Cascade)
  swiped User @relation("SwipesReceived", fields: [swipedUserId], references: [id], onDelete: Cascade)

  // Ensure a user can only swipe once on another user
  @@unique([swiperUserId, swipedUserId])
  @@index([swiperUserId])
  @@index([swipedUserId])
}

model Match {
  id        String    @id @default(cuid())
  userAId   String    // ID of the first user in the match
  userBId   String    // ID of the second user in the match
  createdAt DateTime  @default(now()) // When the match was formed

  // Relations
  userA    User      @relation("UserAMatches", fields: [userAId], references: [id], onDelete: Cascade)
  userB    User      @relation("UserBMatches", fields: [userBId], references: [id], onDelete: Cascade)
  messages Message[] // Messages exchanged within this match

  // Ensure a specific pair of users can only match once
  // Note: This assumes order matters (A->B is different from B->A at DB level).
  // Your application logic should handle checking both ways or enforce an order (e.g., always store lower ID as userAId).
  @@unique([userAId, userBId])
  @@index([userAId])
  @@index([userBId])
  @@index([createdAt]) // Useful for fetching recent matches
}

model Message {
  id        String   @id @default(cuid())
  matchId   String   // Which match this message belongs to
  senderId  String   // Who sent the message
  content   String   // The message text
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false) // Track if the recipient has read the message

  // Relations
  match  Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  sender User  @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([matchId])
  @@index([senderId])
  @@index([createdAt]) // Often fetch messages ordered by time
}

// --- Optional: Blocking & Reporting (Good for safety) ---

// model Block {
//   id          String @id @default(cuid())
//   blockerId   String // User who initiated the block
//   blockedId   String // User who was blocked
//   createdAt   DateTime @default(now())

//   blocker User @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
//   blocked User @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)

//   @@unique([blockerId, blockedId])
// }

// model Report {
//   id          String @id @default(cuid())
//   reporterId  String // User who made the report
//   reportedId  String // User who was reported
//   reason      String // Reason for the report
//   createdAt   DateTime @default(now())

//   reporter User @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
//   reported User @relation("Reported", fields: [reportedId], references: [id], onDelete: Cascade)

//   @@index([reportedId]) // Admins might query reports against a specific user
// }